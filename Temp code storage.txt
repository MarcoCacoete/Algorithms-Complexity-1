
Pusher search algo

/* static void pushSorter(int[] road)
          {
              pusher(road);
              static void pusher(int[] road)
              {
                  int count = road.Count();
                  int counter = 0;
                  int operations = 0;
                  while (counter != road.Count() - 1)
                  {
                      if (road[counter + 1]<road.Count() && road[counter] > road[counter + 1])
                      {
                          int temp = road[counter];
                          road[counter] = road[counter + 1];
                          road[counter + 1] = temp;
                          operations=1;
                      }
                      //elseif(road[counter+1]!=null)
                      if (road[counter + 2]<road.Count() && road[counter] + 1 > road[counter + 2])
                      {
                          int temp = road[counter + 1];
                          road[counter + 1] = road[counter + 2];
                          road[counter + 2] = temp;
                          counter++;
                          operations=1;
                      }
                      counter++;
                  }
                  foreach (int i in road)
                  {
                      Console.WriteLine("Success!" + i);
                  }
                  if (operations == 1)
                  {
                      pusher(road);


                  }
                  else
                  {
                      foreach (int i in road)
                      {
                          Console.WriteLine("Success!" + i);
                      }
                      Console.WriteLine("end");
                  }

              }

          }*/




          /* while (true)
                    {
                        if (road[foundNumber - 1] == number)
                        {
                            foundNumber = foundNumber - 1;
                            Console.WriteLine("The number " + number + " was also found at " + foundNumber + " index. ");

                        }
                        else if (road[foundNumber + -1] == number)
                        {
                            foundNumber = foundNumber - 1;
                            Console.WriteLine("The number " + number + " was also found at " + foundNumber + " index. ");
                        }
                    }*/




public static int[] SortArray(int[] array, int left, int right, int DirectionChoice,int SearchT)
        {
            if (left < right)
            {
                int middle = left + (right - left) / 2;
                SortArray(array, left, middle, DirectionChoice,SearchT);
                SortArray(array, middle + 1, right,DirectionChoice,SearchT);
                MergeArray(array, left, middle, right);
            }
            return array;
        }

        public static void MergeArray(int[] array, int left, int middle, int right)
        {
            var leftArrayLength = middle - left + 1;
            var rightArrayLength = right - middle;
            var leftTempArray = new int[leftArrayLength];
            var rightTempArray = new int[rightArrayLength];
            int i, j;
            for (i = 0; i < leftArrayLength; ++i)
                leftTempArray[i] = array[left + i];
            for (j = 0; j < rightArrayLength; ++j)
                rightTempArray[j] = array[middle + 1 + j];
            i = 0;
            j = 0;
            int k = left;
            while (i < leftArrayLength && j < rightArrayLength)
            {
                if (leftTempArray[i] <= rightTempArray[j])
                {
                    array[k++] = leftTempArray[i++];
                }
                else
                {
                    array[k++] = rightTempArray[j++];
                }
            }
            while (i < leftArrayLength)
            {
                array[k++] = leftTempArray[i++];
            }
            while (j < rightArrayLength)
            {
                array[k++] = rightTempArray[j++];
            }
        }



         public static int[] MergeSort(int[] v)
        {
            if (v.Count() > 1)
            {
                int n1 = v.Count() / 2;
                int n2 = v.Count() - n1;
                int[] left = v[0..n1];
                int[] right = v[n1 + 1..^1];
                MergeSort(left);
                MergeSort(right);
                Merge(v, left, right);
            }
        }